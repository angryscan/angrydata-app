name: Build Feature Branch

on:
  push:
    branches: [ feature/*, hotfix/*, bugfix/* ]
  workflow_dispatch:
    inputs:
      branch:
        description: '–í–µ—Ç–∫–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏'
        required: true
        default: 'feature/test'
        type: string

jobs:
  build-feature:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.inputs.branch || github.ref }}

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew :desktop:build
      env:
        VERSION: ${{ github.ref_name }}-feature

    - name: Build .dmg with Compose Desktop
      run: |
        cd desktop
        ./gradlew :desktop:packageDmg
      env:
        VERSION: ${{ github.ref_name }}-feature

    - name: Find .dmg files
      run: |
        echo "=== Searching for .dmg files ==="
        find . -name "*.dmg" -type f -exec ls -la {} \;

    - name: Upload .dmg artifact
      uses: actions/upload-artifact@v4
      with:
        name: big-data-scanner-feature-${{ github.ref_name }}
        path: |
          desktop/build/compose/binaries/main/dmg/*.dmg
          desktop/build/compose/binaries/main/app/*.dmg
        retention-days: 7

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // Find .dmg files
          const findDmgFiles = (dir) => {
            const files = [];
            const items = fs.readdirSync(dir, { withFileTypes: true });
            
            for (const item of items) {
              const fullPath = path.join(dir, item.name);
              if (item.isDirectory()) {
                files.push(...findDmgFiles(fullPath));
              } else if (item.name.endsWith('.dmg')) {
                files.push(fullPath);
              }
            }
            return files;
          };
          
          const dmgFiles = findDmgFiles('./desktop/build');
          
          if (dmgFiles.length > 0) {
            const comment = `üéâ **–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**
            
üì¶ –ù–∞–π–¥–µ–Ω–Ω—ã–µ .dmg —Ñ–∞–π–ª—ã:
${dmgFiles.map(file => `- \`${file}\``).join('\n')}

–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ Actions.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
